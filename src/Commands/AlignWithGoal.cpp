// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AlignWithGoal.h"

//#define VISION_TUNING
#define CAMERA_WIDTH 320.0
#define CAMERA_HEIGHT 160.0
#define SEEK_ROTATION_SPEED 0.35

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AlignWithGoal::AlignWithGoal(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	Requires(Robot::driving.get());
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AlignWithGoal::Initialize() {
	visionSetup();
	pid->SetInputRange(-40,40);
	pid->SetOutputRange(-1, 1);
	pid->SetContinuous(false);
	t->Start();
	shouldUpdateFrame = true;
}

void AlignWithGoal::visionSetup() {
	while (!video.open(0, CAMERA_WIDTH, CAMERA_HEIGHT,7.5))
	{
		printf("Error connecting to camera stream, retrying\n");
	}

	printf("Opened Camera\n");

	if (!video.isOpened()) {
		printf("Could not open video\n");
	}

	image = frcCreateImage(IMAQ_IMAGE_RGB);

#ifdef VISION_TUNING
	SmartDashboard::PutNumber("hLow", hLow);
	SmartDashboard::PutNumber("hHigh", hHigh);
	SmartDashboard::PutNumber("sLow", sLow);
	SmartDashboard::PutNumber("sHigh", sHigh);
	SmartDashboard::PutNumber("vLow", vLow);
	SmartDashboard::PutNumber("vHigh", vHigh);
	SmartDashboard::PutNumber("minRectWidth", minRectWidth);
	SmartDashboard::PutNumber("maxRectWidth", maxRectWidth);
	SmartDashboard::PutNumber("minRectHeight", minRectHeight);
	SmartDashboard::PutNumber("maxRectHeight", maxRectHeight);
#endif
}

// Called repeatedly when this Command is scheduled to run
void AlignWithGoal::Execute() {
}

// Make this return true when this Command no longer needs to run execute()
bool AlignWithGoal::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void AlignWithGoal::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AlignWithGoal::Interrupted() {

}
